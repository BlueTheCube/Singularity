plugins {
    id 'java'
}

version 'alpha-0.1'

sourceCompatibility = 11
targetCompatibility = 11

sourceSets.main.java.srcDirs = ["src"]

repositories{
    mavenCentral()
    maven{ url 'https://www.jitpack.io' }
}

ext{
    //the build number that this mod is made for
    mindustryVersion = 'v133'
    //version of SDK you will be using
    sdkVersion = '30.0.3'
    //version of build-tools you installed
    sdkRoot = '/home/EBwilson/android-sdk'
    
    modOutputDir = '/home/EBwilson/sd/Android/data/io.anuke.mindustry/files/mods'

    doExec = { cmd ->
        def proc = cmd.execute(null, new File("$buildDir/libs"))
        proc.waitForProcessOutput(System.out, System.err)
    }
}

//java 11 backwards compatibility flag
allprojects{
    tasks.withType(JavaCompile){
        if(JavaVersion.current() != JavaVersion.VERSION_11){
            options.compilerArgs.addAll(['--release', '11'])
        }
    }
}

dependencies{
    compileOnly files("lib/UniverseCore-lib.jar")
    compileOnly "com.github.Anuken.Arc:arc-core:$mindustryVersion"
    compileOnly "com.github.Anuken.Mindustry:core:$mindustryVersion"
}

tasks.withType(JavaCompile) {  
    options.encoding = "GB2312"  
}

task jarAndroid{
    dependsOn "jar"

    doLast{
        def platformRoot = new File("$sdkRoot/platforms/").listFiles().sort().reverse().find{ f -> new File(f, "android.jar").exists()}
    
        //collect dependencies needed for desugaring
        def dependencies = (configurations.compileClasspath.asList() + configurations.runtimeClasspath.asList() + [new File(platformRoot, "android.jar")]).collect{ "--classpath $it.path" }.join(" ")
    
        //dex and desugar files - this requires d8 in your PATH
        "$sdkRoot/build-tools/$sdkVersion/d8 $dependencies --min-api 14 --output ${project.archivesBaseName}Android.jar ${project.archivesBaseName}Desktop.jar"
            .execute(null, new File("$buildDir/libs")).waitForProcessOutput(System.out, System.err)
    }
}

jar{
    archiveFileName = "${project.archivesBaseName}Desktop.jar"

    from{
        configurations.runtimeClasspath.collect{ it.isDirectory() ? it : zipTree(it) }
    }

    from(rootDir){
        include "mod.hjson"
        include "icon.png"
    }

    from("assets/") {
        include "**"
    }
}

task deploy(type: Jar){
    dependsOn jarAndroid
    dependsOn jar
    archiveFileName = "${project.archivesBaseName}.jar"

    from{ [zipTree("$buildDir/libs/${project.archivesBaseName}Desktop.jar"), zipTree("$buildDir/libs/${project.archivesBaseName}Android.jar")] }

    doLast{
        delete{ delete "$buildDir/libs/${project.archivesBaseName}Desktop.jar" }
        delete{ delete "$buildDir/libs/${project.archivesBaseName}Android.jar" }
    
        if(modOutputDir != null){
            copy {
                into("$modOutputDir/")
                from("$buildDir/libs/${rootProject.name}.jar")
            }
        }
    }
}
